Техническое Задание (ТЗ): Онлайн Видео Конвертер

Версия: 1.0

1. Введение и Цель проекта

Цель проекта – разработка веб-приложения (онлайн-сервиса), предоставляющего пользователям возможность загружать видеофайлы различных форматов, конвертировать их в формат MP4 с заданными параметрами (25 FPS, сохранение оригинального битрейта, обработка вертикальных видео) и скачивать результат. Сервис должен предоставлять интуитивно понятный интерфейс с отображением прогресса загрузки и возможностью скачивания готового файла. Обработка видео должна происходить на серверной стороне с использованием процессорных мощностей сервера.

2. Функциональные Требования (FR)
ID	Требование	Описание	Приоритет
FR1	Загрузка Видеофайла	На главной странице должна быть кнопка (например, <input type="file"> стилизованная под кнопку "Choose File" / "Выбрать файл"). При нажатии открывается стандартное окно выбора файла ОС. Пользователь может выбрать один видеофайл.	Высокий
FR1.1	Поддерживаемые форматы на входе	Система должна пытаться обработать видеофайлы любых распространенных форматов (например, AVI, MOV, WMV, MKV, FLV, WEBM, 3GP и т.д.). Необходимо предусмотреть механизм определения возможности конвертации загруженного файла. На клиентской стороне можно ограничить выбор через атрибут accept="video/*".	Высокий
FR1.2	Ограничение размера файла (Опционально)	Рекомендуется установить максимальный размер загружаемого файла (например, 1 ГБ), чтобы предотвратить чрезмерную нагрузку на сервер. Это значение должно быть настраиваемым. При попытке загрузить файл большего размера выводить сообщение об ошибке.	Средний
FR2	Отображение Прогресса Загрузки	Сразу после выбора файла и начала загрузки на сервер, интерфейс должен отображать анимированный прогресс загрузки в процентах (например, 0% -> 100%). Это должно быть реализовано с использованием JavaScript (AJAX/Fetch API с отслеживанием прогресса). Кнопка выбора файла должна быть деактивирована или скрыта на время загрузки.	Высокий
FR3	Серверная Обработка (Конвертация)	После полной загрузки файла на сервер, он должен быть передан на обработку.	Высокий
FR3.1	Целевой Формат и Кодек	Исходный видеофайл любого формата должен быть сконвертирован в контейнер MP4. Видеокодек: H.264 (libx264). Аудиокодек: AAC.	Высокий
FR3.2	Частота Кадров (FPS)	Частота кадров выходного видеофайла должна быть принудительно установлена на 25 кадров в секунду (25 FPS), независимо от исходной частоты кадров.	Высокий
FR3.3	Битрейт Видео	Для горизонтальных видео (ширина >= высота): Видеопоток должен быть перекодирован с сохранением оригинального среднего битрейта исходного файла. Для вертикальных видео (высота > ширина), преобразуемых в горизонтальный формат: Использовать режим кодирования по качеству (например, CRF 23 для H.264), так как сохранение исходного битрейта при добавлении черных полей не всегда целесообразно.	Высокий
FR3.4	Битрейт и Каналы Аудио	Аудиопоток должен быть по возможности скопирован без перекодирования (-c:a copy). Если копирование невозможно (например, из-за несовместимости с MP4 контейнером), аудио следует перекодировать в AAC с сохранением оригинального битрейта и количества каналов (если возможно определить), либо использовать стандартный битрейт (например, 128 kbps стерео).	Высокий
FR3.5	Обработка Вертикальных Видео	Если исходное видео имеет вертикальную ориентацию (высота > ширина), оно должно быть преобразовано в горизонтальный формат (например, с соотношением сторон 16:9). Это достигается путем вписывания исходного вертикального кадра в центр горизонтального кадра с добавлением черных полей (полос) по бокам (letterboxing/pillarboxing). Выходное разрешение должно быть стандартным (например, 1920x1080 или 1280x720), либо масштабироваться пропорционально, сохраняя исходную высоту и добавляя поля до соотношения 16:9. Уточнение: предпочтительнее вписать в стандартный горизонтальный кадр (например, 1920x1080), если позволяет исходное разрешение, сохранив пропорции видео.	Высокий
FR3.6	Статус Обработки	Во время процесса конвертации на сервере пользователь должен видеть индикатор того, что идет обработка (например, сообщение "Processing video..." или анимированный индикатор). Этот статус должен сменить индикатор загрузки.	Высокий
FR4	Сохранение Результата на Сервере	Конвертированный файл должен быть сохранен на сервере в специальной папке.	Высокий
FR4.1	Путь Сохранения	Папка для сохранения готовых файлов: ./Render (относительно корня приложения или другого указанного места). Папка должна быть создана, если не существует, и иметь права на запись для процесса веб-сервера/приложения.	Высокий
FR4.2	Именование Файлов	Имя выходного файла должно формироваться по шаблону: [имя_исходного_файла_без_расширения]_convert.mp4.	Высокий
FR4.3	Обработка Дубликатов Имен	Если файл с именем [имя]_convert.mp4 уже существует в папке Render, система должна автоматически добавлять порядковый номер к имени файла: [имя]_convert_1.mp4, [имя]_convert_2.mp4 и так далее, пока не найдет уникальное имя.	Высокий
FR5	Предоставление Ссылки для Скачивания	После успешного завершения конвертации и сохранения файла, пользователю должна быть отображена кнопка "Download" / "Скачать".	Высокий
FR5.1	Функциональность Кнопки Скачивания	Нажатие на кнопку "Download" должно инициировать скачивание сконвертированного файла (.mp4) браузером пользователя. Имя скачиваемого файла должно соответствовать сгенерированному на сервере (FR4.2, FR4.3).	Высокий
FR6	Сброс Интерфейса для Новой Конвертации	После скачивания файла или если пользователь захочет сконвертировать другой файл (возможно, нужна отдельная кнопка "Convert Another File" / "Сконвертировать еще" или просто интерфейс возвращается в исходное состояние), интерфейс должен вернуться в состояние ожидания выбора файла (FR1).	Средний

3. Нефункциональные Требования (NFR)
ID	Требование	Описание	Приоритет
NFR1	Производительность	Конвертация видео – ресурсоемкий процесс. Время конвертации будет напрямую зависеть от длительности/размера исходного файла и мощности CPU сервера. Приложение не должно "зависать" на стороне клиента во время серверной обработки.	Высокий
NFR2	Удобство (UX)	Интерфейс должен быть простым, интуитивно понятным, с одним основным действием на главной странице. Все шаги (выбор -> загрузка -> обработка -> скачивание) должны быть очевидны для пользователя. Требуется четкая обратная связь на каждом этапе.	Высокий
NFR3	Надежность	Приложение должно корректно обрабатывать возможные ошибки (см. раздел 6). Конвертация должна быть стабильной для поддерживаемых форматов.	Высокий
NFR4	Безопасность	Необходимо предусмотреть защиту от базовых веб-уязвимостей (например, XSS через имя файла). Валидация загружаемых файлов на сервере (тип, размер). Имена файлов должны быть санитайзированы перед использованием в командах или путях.	Средний
NFR5	Масштабируемость	В первой версии приложение может работать на одном сервере. Необходимо учитывать, что для поддержки большого числа пользователей потребуются механизмы масштабирования (очереди задач, несколько worker'ов для конвертации).	Низкий
NFR6	Управление Ресурсами	Необходимо реализовать механизм очистки временных файлов (загруженных оригиналов) и, возможно, старых сконвертированных файлов из папки Render (например, по TTL или при достижении лимита папки) для предотвращения переполнения диска.	Средний

4. Технические Спецификации
Компонент	Требование/Технология	Примечание
Серверная Платформа	Язык: Python (Рекомендуется) или Node.js. Фреймворк: Flask/Django (для Python) или Express (для Node.js).	Выбор зависит от предпочтений, Python часто используется для таких задач вместе с библиотеками-обертками для FFmpeg.
Видео Обработка	Основной инструмент: FFmpeg. Должен быть установлен на сервере и доступен для вызова из серверного приложения.	Это де-факто стандарт для работы с видео.
Команды FFmpeg (Примеры)	- Получение информации: ffmpeg -i [input_file] (для извлечения битрейта, разрешения, fps). <br> - Базовая конвертация: ffmpeg -i [input_file] -c:v libx264 -b:v [original_bitrate]k -r 25 -c:a aac -b:a 128k [output_file.mp4] <br> - Конвертация с копированием аудио: ... -c:a copy ... <br> - Обработка вертикального видео (Пример: вписать в 1920x1080): ffmpeg -i [input_file] -vf "scale=w=1920:h=1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2:color=black" -c:v libx264 -crf 23 -r 25 -c:a aac -b:a 128k [output_file.mp4]	Точные команды должны динамически формироваться на основе свойств исходного файла. [original_bitrate] нужно извлечь и подставить.
Клиентская Часть (Frontend)	HTML5, CSS3, JavaScript (ES6+). <br> - Использование FormData и XMLHttpRequest (или fetch) для асинхронной загрузки файла с отслеживанием прогресса (xhr.upload.onprogress). <br> - Динамическое обновление UI для отображения статусов (Загрузка %, Обработка..., Кнопка Скачать).	Можно использовать простые JS-библиотеки для UI-элементов (например, прогресс-бара), но не обязательно.
Взаимодействие Клиент-Сервер	1. Клиент отправляет файл POST-запросом. <br> 2. Сервер принимает файл, сохраняет временно. <br> 3. Сервер запускает FFmpeg в фоновом режиме (или через очередь задач). <br> 4. Клиент может периодически опрашивать статус (polling) или использовать WebSocket для получения обновлений статуса обработки и ссылки на скачивание. <br> 5. Сервер предоставляет эндпоинт для скачивания готового файла.	Использование WebSocket предпочтительнее для实时 обновлений, но polling проще в реализации.
Серверное Окружение	ОС: Linux (Рекомендуется). <br> Веб-сервер: Nginx или Apache (для проксирования запросов к приложению). <br> Установленный FFmpeg. <br> Достаточные ресурсы CPU, RAM и дискового пространства.	
Управление Процессами	Запуск FFmpeg должен быть неблокирующим для основного потока веб-сервера. Использовать subprocess (Python) / child_process (Node.js) асинхронно, или библиотеки для работы с фоновыми задачами (Celery для Python, BullMQ/agenda для Node.js).	Использование очереди задач (Celery и т.п.) является более масштабируемым решением.

5. Пользовательский Интерфейс (UI) и Опыт Взаимодействия (UX)

    Главная страница: Минималистичный дизайн. Центральный элемент – большая, заметная кнопка "Choose File" / "Выбрать файл". Может присутствовать краткое описание сервиса и поддерживаемых действий.

    Процесс Загрузки: После выбора файла кнопка "Choose File" заменяется (или дополняется) индикатором загрузки (прогресс-бар и/или текстовое сообщение "Загрузка: XX%").

    Процесс Обработки: После завершения загрузки (100%), индикатор загрузки сменяется индикатором обработки (например, "Идет конвертация видео..." / "Processing video..." с анимированным элементом типа спиннера).

    Завершение: Индикатор обработки сменяется сообщением об успехе (например, "Конвертация завершена!") и активной кнопкой "Download" / "Скачать". Имя файла может быть показано рядом с кнопкой.

    Цикл: После скачивания или при возникновении ошибки с возможностью повтора, интерфейс должен предоставить возможность начать процесс заново (например, кнопка "Choose File" снова становится активной/видимой).

6. Обработка Ошибок

    Неверный тип файла: Сообщение пользователю (желательно еще до загрузки, если возможно проверить расширение на клиенте, и обязательно на сервере).

    Файл слишком большой: Сообщение об ошибке с указанием лимита.

    Ошибка загрузки: Сообщение о проблеме с сетью или сервером.

    Ошибка конвертации: Сообщение "Не удалось сконвертировать файл. Пожалуйста, попробуйте другой файл или обратитесь в поддержку." (Внутренние логи сервера должны содержать детали ошибки FFmpeg).

    Серверные ошибки: Общее сообщение об ошибке сервера.

    Все сообщения об ошибках должны быть понятны пользователю и предлагать возможное решение (например, "попробуйте еще раз", "выберите другой файл").

7. Развертывание (Deployment)

    Приложение должно быть развернуто на сервере с установленным FFmpeg и необходимым ПО (Python/Node.js, веб-сервер).

    Папка Render должна быть создана и иметь соответствующие права доступа на запись для пользователя, от имени которого работает приложение.

    Необходимо настроить веб-сервер (Nginx/Apache) для обработки статических файлов и проксирования динамических запросов к приложению.

8. Будущие Улучшения (Опционально)

    Возможность выбора выходного разрешения.

    Возможность выбора битрейта или качества (CRF).

    Поддержка конвертации нескольких файлов одновременно (очередь).

    Пользовательские аккаунты и история конвертаций.

    Предпросмотр видео перед/после конвертации.

    Более детальный статус конвертации (если FFmpeg позволяет).